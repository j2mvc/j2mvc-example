<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<artifactId>j2mvc-example</artifactId>
		<groupId>com.j2mvc.example</groupId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>

	<artifactId>j2mvc-example-app</artifactId>

	<name>j2mvc-example-app</name>
	<!-- FIXME change it to the project's website -->
	<url>http://www.j2mvc.com</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>1.7</maven.compiler.source>
		<maven.compiler.target>1.7</maven.compiler.target>
	</properties>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.j2mvc</groupId>
			<artifactId>j2mvc-util</artifactId>
			<version>2.0.10</version>
		</dependency>
		<dependency>
			<groupId>com.j2mvc</groupId>
			<artifactId>j2mvc-framework-app</artifactId>
			<version>2.0.10</version>
		</dependency>
	</dependencies>

	<build>
		<finalName>j2mvcAppDemo</finalName>
		<pluginManagement><!-- lock down plugins versions to avoid using Maven 
				defaults (may be moved to parent pom) -->
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.2</version>
					<configuration>
						<source>${version.jdk}</source>
						<target>${version.jdk}</target>
						<encoding>${project.build.sourceEncoding}</encoding>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>appassembler-maven-plugin</artifactId>
					<version>1.2.1</version>
					<executions>
						<execution>
							<id>make-assembly</id>
							<phase>package</phase>
							<goals>
								<goal>assemble</goal>
							</goals>
						</execution>
					</executions>

					<configuration>
						<!-- 发布命令mvn clean package appassembler:assemble -->
						<!--lib下直接存放jar，没有路径文件夹（如com/apache)，如果没有这个选项则放在lib下的jar包会被com/apache类似的多层文件夹包裹起来 -->
						<repositoryLayout>flat</repositoryLayout>
						<configurationDirectory>conf</configurationDirectory>
						<configurationSourceDirectory>src/main/java/conf</configurationSourceDirectory>
						<copyConfigurationDirectory>true</copyConfigurationDirectory>
						<includeConfigurationDirectoryInClasspath>true</includeConfigurationDirectoryInClasspath>
						<!--生成的项目的目录位置，这里的client是项目的名称，你可以根据你的需要自己随便命名 -->
						<assembleDirectory>${project.build.directory}/creep</assembleDirectory>
						<!--java启动参数 -->
						<extraJvmArguments>-Xms128m</extraJvmArguments>
						<binFileExtensions>
							<unix>.sh</unix>
						</binFileExtensions>
						<platforms>
							<!-- <platform>windows</platform> -->
							<platform>unix</platform>
						</platforms>
						<repositoryName>lib</repositoryName>
						<programs>
							<program>
								<!--指定主类，脚本名。会生成shell/bat两种类型,也可用platforms指定运行平台 -->
								<mainClass>com.j2mvc.example.app.App</mainClass>
								<!-- 生成的脚本文件的名称，比如start.sh,你也可以根据你的需要命名成其他名字 -->
								<name>startup</name>
							</program>
						</programs>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<resources>
			<resource>
				<directory>src/main/bin</directory>
				<includes>
					<include>*</include>
				</includes>
				<targetPath>${project.build.directory}/j2mvcAppDemo/bin</targetPath>
			</resource>
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.properties</include>
					<include>**/*.xml</include>
					<include>**/*.tld</include>
				</includes>
				<filtering>true</filtering>
			</resource>
		</resources>
	</build>
</project>
